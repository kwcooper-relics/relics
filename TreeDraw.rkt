#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 105 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1           0 1565 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 189
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e TreeDraw) (read-case-sensitive #t) (teachpacks ()) (htdp-settings "
 #"#(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 51 #";tried to submit at 8:30 9:20 10:15 11:10 <--worked"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 6 #"srfi/1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; A PrefixTree (PT) is a"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; | (make-end)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; | (make-node char:Character nodes:ListOfPT)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #" ["
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 4 #" [])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"e\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"make-node"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"f\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 9 #"make-node"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"t\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"make-node"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";ex1"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";match?: loc:ListofCharacters PT:PrefixTree -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";Checks if a certain word is in a prefix tree"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 3 #") ("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 3 #") ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 57 #";match-lopt?: loc:ListofCharacters lopt:ListofPrefixTrees"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 37 #";finds if the word is in the given pt"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"match-lopt?"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 11 #"match-lopt?"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"match-lopt?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 3 #") ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"match?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"o\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 24 3 2 #") "
0 0 14 3 3 #"pt1"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";ex2"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";char->image: c:char -> image"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";draws a node with a given text overlayed"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 6           4 4 380
(
 #"(#(struct:overlay #(struct:overlay #(struct:overlay #(struct:transla"
 #"te 25.0 25.0 #(struct:text \"x\" 0 1 \"black\" 25 #f swiss normal no"
 #"rmal #f)) #(struct:translate 25.0 25.0 #(struct:ellipse 36 36 0 255 "
 #"\"white\"))) #(struct:translate 25.0 25.0 #(struct:ellipse 40 40 0 2"
 #"55 \"red\"))) #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 "
 #"\"transparent\"))) #(struct:bb 50.0 50.0 50.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";ex3"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";end-image: the symbol for the stop node"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\303\230\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";ex4"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";pt->image which accepts a prefix tree and returns an image"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";pt->image: PrefixTree -> image"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(define (pt->image pt)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";  ((char->image (node-char pt) ...)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";lopt->images which accepts a list of prefix tree (lopt) and returns"
 #" a list of images"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";lopt->images :ListofPrefixTrees -> images"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(define (lopt->image lopt)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";  (...(node-char (first lopt)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";   ... (lopt-image (rest lopt)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";ex5"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"tst1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";loim-width: loi:listofimages -> num"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";takes a list of images, returns their width"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"loi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"loi"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"loi"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"loim-width"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"loi"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(define (loim-width loim)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 36 #";(foldl + 0 (map image-width loim)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 24 3 1 #" "
0 0 14 3 4 #"tst1"
0 0 24 3 2 #") "
0 0 21 3 3 #"150"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";loim-height : loim:listofimages -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";accepts a list of images, returns their total height"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(define (loim-height loi)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";   (cond"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";    [(empty? loi) 50]"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  [else (cond"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 12 #"          [("
0 0 17 3 6 #"equal?"
0 0 17 3 2 #" ("
0 0 17 3 12 #"image-height"
0 0 17 3 39 #" (first loi)) (loim-height (rest loi)))"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";           (image-height (first loi))]"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";          [else \"height error\"])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"image-height"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 24 3 1 #" "
0 0 14 3 4 #"tst1"
0 0 24 3 2 #") "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";ex6"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";loim-centers: n:number lst:ListOfImages -> list"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";returns center of a list of images and a number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"loim-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"loim-center"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"loim-center"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"tst1"
0 0 24 3 2 #")("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 21 3 2 #"75"
0 0 24 3 1 #" "
0 0 21 3 3 #"125"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ex7 "
0 0 24 29 1 #"\n"
0 0 17 3 44 #";background: loim:listofimages -> background"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";creates a background with a list of images,"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";or returns a transparent image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"background"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"loim-width"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #" ("
0 0 14 3 11 #"loim-height"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 3 #")) "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"background"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-image"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"background"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ex8 "
0 0 24 29 1 #"\n"
0 0 17 3 44 #";draw-lines image lon:ListofNumbers -> image"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";Takes a background images and a list of numbers"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";and draws lines connecting them"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";We use these numbers to account for the spacing relitive to the ima"
 #"ge width"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #") "
0 0 14 3 5 #"image"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 8 #"add-line"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 2 #"25"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 2 #") "
0 0 21 3 3 #"125"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"draw-lines"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lon"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 24 3 2 #" ("
0 0 14 3 10 #"background"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #")("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 21 3 2 #"75"
0 0 24 3 1 #" "
0 0 21 3 3 #"125"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 6           4 4 1422
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:line-segment #(struct:point 75 25) #(struct:po"
 #"int 25 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) "
 #"#(struct:pulled-point 0 0 150 150 0 0) #(struct:pulled-point 0 0 0 1"
 #"50 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:line-segment #(struct:point 75 25) #(struct:point 75 125) "
 #"\"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pul"
 #"led-point 0 0 150 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255"
 #" \"transparent\"))))) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:li"
 #"ne-segment #(struct:point 75 25) #(struct:point 125 125) \"black\") "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point 0"
 #" 0 150 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transpar"
 #"ent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #(struct:pulled-po"
 #"int 0 0 0 150 0 0)) 255 \"transparent\")))))))) #(struct:bb 150 150 "
 #"150) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ex 9"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";draw-loim image loim:ListofImages -> image"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";draws an image based on the  input image, our updated background,"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";and draws the images from loi on the lines"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";we use 0 and 100 so the line hits the proper point of the node img"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"place-image/align"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"loim"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"background"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #")("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #")("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 21 3 2 #"75"
0 0 24 3 1 #" "
0 0 21 3 3 #"125"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #")("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #")("
0 0 14 3 11 #"char->image"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 4 2335
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 150 0) #(struct:p"
 #"oint 150 150) #(struct:point 0 150)) #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:translate 25.0 125.0 #(struct:text \"1\" 0 1 \"black\" 2"
 #"5 #f swiss normal normal #f)) #(struct:translate 25.0 125.0 #(struct"
 #":ellipse 36 36 0 255 \"white\"))) #(struct:translate 25.0 125.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))) #(struct:translate 25 125 #(stru"
 #"ct:ellipse 50 50 0 255 \"transparent\"))) #(struct:translate 75.0 12"
 #"5.0 #(struct:text \"2\" 0 1 \"black\" 25 #f swiss normal normal #f))"
 #") #(struct:translate 75.0 125.0 #(struct:ellipse 36 36 0 255 \"white"
 #"\"))) #(struct:translate 75.0 125.0 #(struct:ellipse 40 40 0 255 \"r"
 #"ed\"))) #(struct:translate 75.0 125 #(struct:ellipse 50 50 0 255 \"t"
 #"ransparent\"))) #(struct:translate 125.0 125.0 #(struct:text \"3\" 0"
 #" 1 \"black\" 25 #f swiss normal normal #f))) #(struct:translate 125."
 #"0 125.0 #(struct:ellipse 36 36 0 255 \"white\"))) #(struct:translate"
 #" 125.0 125.0 #(struct:ellipse 40 40 0 255 \"red\"))) #(struct:transl"
 #"ate 125.0 125 #(struct:ellipse 50 50 0 255 \"transparent\"))) #(stru"
 #"ct:line-segment #(struct:point 75 25) #(struct:point 25 125) \"black"
 #"\")) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:p"
 #"ulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #("
 #"struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\")) #(struct:l"
 #"ine-segment #(struct:point 75 25) #(struct:point 75 125) \"black\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #(stru"
 #"ct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\")) #(struct:line-"
 #"segment #(struct:point 75 25) #(struct:point 125 125) \"black\")) #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #(struct:"
 #"pulled-point 0 0 0 150 0 0)) 255 \"transparent\")) #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 "
 #"0 0) #(struct:pulled-point 0 0 150 150 0 0) #(struct:pulled-point 0 "
 #"0 0 150 0 0)) 255 \"transparent\"))) #(struct:bb 150 150 150.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ex10"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";draw-node: image pt:PrefixTree -> image"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";takes a pt and an image and draws the node on it"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";Use these to find the midpoint of the node img"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"char->image"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")  "
0 0 21 3 2 #"25"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 6           4 4 2335
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 150 0) #(struct:p"
 #"oint 150 150) #(struct:point 0 150)) #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:translate 25.0 125.0 #(struct:text \"1\" 0 1 \"black\" 2"
 #"5 #f swiss normal normal #f)) #(struct:translate 25.0 125.0 #(struct"
 #":ellipse 36 36 0 255 \"white\"))) #(struct:translate 25.0 125.0 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))) #(struct:translate 25 125 #(stru"
 #"ct:ellipse 50 50 0 255 \"transparent\"))) #(struct:translate 75.0 12"
 #"5.0 #(struct:text \"2\" 0 1 \"black\" 25 #f swiss normal normal #f))"
 #") #(struct:translate 75.0 125.0 #(struct:ellipse 36 36 0 255 \"white"
 #"\"))) #(struct:translate 75.0 125.0 #(struct:ellipse 40 40 0 255 \"r"
 #"ed\"))) #(struct:translate 75.0 125 #(struct:ellipse 50 50 0 255 \"t"
 #"ransparent\"))) #(struct:translate 125.0 125.0 #(struct:text \"3\" 0"
 #" 1 \"black\" 25 #f swiss normal normal #f))) #(struct:translate 125."
 #"0 125.0 #(struct:ellipse 36 36 0 255 \"white\"))) #(struct:translate"
 #" 125.0 125.0 #(struct:ellipse 40 40 0 255 \"red\"))) #(struct:transl"
 #"ate 125.0 125 #(struct:ellipse 50 50 0 255 \"transparent\"))) #(stru"
 #"ct:line-segment #(struct:point 75 25) #(struct:point 25 125) \"black"
 #"\")) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:p"
 #"ulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #("
 #"struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\")) #(struct:l"
 #"ine-segment #(struct:point 75 25) #(struct:point 75 125) \"black\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #(stru"
 #"ct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\")) #(struct:line-"
 #"segment #(struct:point 75 25) #(struct:point 125 125) \"black\")) #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #(struct:"
 #"pulled-point 0 0 0 150 0 0)) 255 \"transparent\")) #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 "
 #"0 0) #(struct:pulled-point 0 0 150 150 0 0) #(struct:pulled-point 0 "
 #"0 0 150 0 0)) 255 \"transparent\"))) #(struct:bb 150 150 150.0) #f)"
) 0 0 24 3 2 #"  "
0 0 14 3 3 #"pt1"
0 0 24 3 2 #") "
0 6           4 4 3031
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 150 0) #(struct:p"
 #"oint 150 150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 50.0 0.0 #(struct:overlay #(struct:trans"
 #"late 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:ov"
 #"erlay #(struct:translate 11.0 5.5 #(struct:translate 7.0 12.5 #(stru"
 #"ct:text \"o\" 0 1 \"black\" 25 #f swiss normal normal #f))) #(struct"
 #":translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255"
 #" \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struc"
 #"t:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 150 0) #(struct:point 150 150) #(struct:point 0 150)) #(struct:"
 #"overlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:"
 #"overlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:"
 #"overlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:"
 #"overlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:"
 #"overlay #(struct:overlay #(struct:translate 25.0 125.0 #(struct:text"
 #" \"1\" 0 1 \"black\" 25 #f swiss normal normal #f)) #(struct:transla"
 #"te 25.0 125.0 #(struct:ellipse 36 36 0 255 \"white\"))) #(struct:tra"
 #"nslate 25.0 125.0 #(struct:ellipse 40 40 0 255 \"red\"))) #(struct:t"
 #"ranslate 25 125 #(struct:ellipse 50 50 0 255 \"transparent\"))) #(st"
 #"ruct:translate 75.0 125.0 #(struct:text \"2\" 0 1 \"black\" 25 #f sw"
 #"iss normal normal #f))) #(struct:translate 75.0 125.0 #(struct:ellip"
 #"se 36 36 0 255 \"white\"))) #(struct:translate 75.0 125.0 #(struct:e"
 #"llipse 40 40 0 255 \"red\"))) #(struct:translate 75.0 125 #(struct:e"
 #"llipse 50 50 0 255 \"transparent\"))) #(struct:translate 125.0 125.0"
 #" #(struct:text \"3\" 0 1 \"black\" 25 #f swiss normal normal #f))) #"
 #"(struct:translate 125.0 125.0 #(struct:ellipse 36 36 0 255 \"white\""
 #"))) #(struct:translate 125.0 125.0 #(struct:ellipse 40 40 0 255 \"re"
 #"d\"))) #(struct:translate 125.0 125 #(struct:ellipse 50 50 0 255 \"t"
 #"ransparent\"))) #(struct:line-segment #(struct:point 75 25) #(struct"
 #":point 25 125) \"black\")) #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 150 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"tran"
 #"sparent\")) #(struct:line-segment #(struct:point 75 25) #(struct:poi"
 #"nt 75 125) \"black\")) #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point 0"
 #" 0 150 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transpar"
 #"ent\")) #(struct:line-segment #(struct:point 75 25) #(struct:point 1"
 #"25 125) \"black\")) #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 "
 #"150 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent"
 #"\")) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:p"
 #"ulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 150 0 0) #("
 #"struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\"))))))) #(str"
 #"uct:bb 150 150 150.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";e11"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";pt->image: pt:PrefixTree -> image"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";accepts a prefix tree, returns an image"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";the order matters to avoid line crossing"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 24 3 1 #" "
0 0 14 3 2 #"PT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 2 #"PT"
0 0 24 3 2 #") "
0 0 14 3 9 #"end-image"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-node"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-loim"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-lines"
0 0 24 3 2 #" ("
0 0 14 3 10 #"background"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lopt->image"
0 0 24 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"PT"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 11 #"loim-center"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lopt->image"
0 0 24 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"PT"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 11 #"lopt->image"
0 0 24 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"PT"
0 0 24 3 4 #"))) "
0 0 14 3 2 #"PT"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";lopt->image: lopt -> image"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";outputs the list of pt's"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"lopt->image"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 11 #"lopt->image"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lopt"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 24 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 24 3 2 #") "
0 6           4 4 15771
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 300 0) #(struct:p"
 #"oint 300 350) #(struct:point 0 350)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 125.0 0.0 #(struct:overlay #(struct:tran"
 #"slate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:o"
 #"verlay #(struct:translate 11.0 5.5 #(struct:translate 7.0 12.5 #(str"
 #"uct:text \"o\" 0 1 \"black\" 25 #f swiss normal normal #f))) #(struc"
 #"t:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 25"
 #"5 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(s"
 #"truct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(stru"
 #"ct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\")))))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 300 0) #(struct:point 300 350) #(struct:point 0 350)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 100 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:p"
 #"oint 100 250) #(struct:point 0 250)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 25.0 0.0 #(struct:overlay #(struct:trans"
 #"late 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:ov"
 #"erlay #(struct:translate 11.0 5.5 #(struct:translate 7.0 12.5 #(stru"
 #"ct:text \"n\" 0 1 \"black\" 25 #f swiss normal normal #f))) #(struct"
 #":translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255"
 #" \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(st"
 #"ruct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struc"
 #"t:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 100 0) #(struct:point 100 250) #(struct:point 0 250)) #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 0 100 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 5.0 "
 #"5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(s"
 #"truct:translate 8.5 5.5 #(struct:translate 9.5 12.5 #(struct:text \""
 #"\303\230\" 0 1 \"black\" 25 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \""
 #"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(struc"
 #"t:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(s"
 #"truct:translate 50.0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 50 0) #(struct:point 50 150) #(struct:point 0 150)) #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct:ove"
 #"rlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:translate "
 #"2.0 2.0 #(struct:overlay #(struct:translate 11.0 5.5 #(struct:transl"
 #"ate 7.0 12.5 #(struct:text \"e\" 0 1 \"black\" 25 #f swiss normal no"
 #"rmal #f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:"
 #"ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \""
 #"transparent\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:po"
 #"int 0 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point "
 #"0 150)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0"
 #" 100 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #("
 #"struct:translate 2.0 2.0 #(struct:overlay #(struct:translate 8.5 5.5"
 #" #(struct:translate 9.5 12.5 "
 #"#(struct:text \"\303\230\" 0 1 \"black\" 25 #f swiss normal normal #"
 #"f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellips"
 #"e 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:transla"
 #"te 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translat"
 #"e 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transp"
 #"arent\"))))) #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-segmen"
 #"t #(struct:point 25 25) #(struct:point 25 125) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #("
 #"struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0"
 #" 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\"))))) #"
 #"(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #("
 #"struct:pulled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 "
 #"0 0)) 255 \"transparent\"))))))))))))))) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:line-segment #(struct:point 50 25) #(struct:point 2"
 #"5 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) #(str"
 #"uct:pulled-point 0 0 100 250 0 0) #(struct:pulled-point 0 0 0 250 0 "
 #"0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 50 25) #(struct:point 75 125) \"bla"
 #"ck\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point"
 #" 0 0 0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) #(struct:pulled-p"
 #"oint 0 0 100 250 0 0) #(struct:pulled-point 0 0 0 250 0 0)) 255 \"tr"
 #"ansparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 100 0 0 0) #(struct:pulled-point 0 0 100 250 0 0) #(struct:pul"
 #"led-point 0 0 0 250 0 0)) 255 \"transparent\"))))))))))))))) #(struc"
 #"t:translate 100 0 #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"150 0) #(struct:point 150 250) #(struct:point 0 250)) #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 50.0 0.0 #(struct:overl"
 #"ay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2."
 #"0 2.0 #(struct:overlay #(struct:translate 14.5 5.5 #(struct:translat"
 #"e 3.5 12.5 #(struct:text \"f\" 0 1 \"black\" 25 #f swiss normal norm"
 #"al #f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:el"
 #"lipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:tra"
 #"nslate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:tran"
 #"slate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"tr"
 #"ansparent\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 150 0) #(struct:point 150 250) #(struct:point "
 #"0 250)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0"
 #" 100 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 5.0 5.0 #(struc"
 #"t:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:trans"
 #"late 8.5 5.5 #(struct:translate 9.5 12.5 #(struct:text \"\303\230\" "
 #"0 1 \"black\" 25 #f swiss normal normal #f))) #(struct:translate 0 0"
 #" #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))"
 #") #(struct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse 4"
 #"0 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 25"
 #" 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:trans"
 #"late 50.0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 50 0) "
 #"#(struct:point 50 150) #(struct:point 0 150)) #(struct:translate 0 0"
 #" #(struct:overlay #(struct:translate 0.0 0.0 #(struct:overlay #(stru"
 #"ct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(s"
 #"truct:overlay #(struct:translate 14.5 5.5 #(struct:translate 3.5 12."
 #"5 #(struct:text \"f\" 0 1 \"black\" 25 #f swiss normal normal #f))) "
 #"#(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 "
 #"36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20"
 #" 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0"
 #" #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent"
 #"\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #("
 #"struct:point 50 0) #(struct:point 50 150) #(struct:point 0 150)) #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 100 #(stru"
 #"ct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:tran"
 #"slate 2.0 2.0 #(struct:overlay #(struct:translate 8.5 5.5 #(struct:t"
 #"ranslate 9.5 12.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 #f swi"
 #"ss normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 "
 #"18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 "
 #"0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\")))))"
 #" #(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50"
 #" 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 25 25) #(struct:point 25 125) \"b"
 #"lack\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-"
 #"point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"tr"
 #"ansparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulle"
 #"d-point 0 0 0 150 0 0)) 255 \"transparent\"))))))))))))))) #(struct:"
 #"translate 100.0 0 #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"50 0) #(struct:point 50 150) #(struct:point 0 150)) #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct:overlay "
 #"#(struct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2"
 #".0 #(struct:overlay #(struct:translate 14.5 5.5 #(struct:translate 3"
 #".5 12.5 #(struct:text \"t\" 0 1 \"black\" 25 #f swiss normal normal "
 #"#f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellip"
 #"se 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:transl"
 #"ate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:transla"
 #"te 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"trans"
 #"parent\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 150"
 #")) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 100 "
 #"#(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struc"
 #"t:translate 2.0 2.0 #(struct:overlay #(struct:translate 8.5 5.5 #(st"
 #"ruct:translate 9.5 12.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 "
 #"#f swiss normal normal #f))) #(struct:translate 0 0 #(struct:transla"
 #"te 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:transl"
 #"ate 0 0 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(s"
 #"truct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))"
 #"))) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(struc"
 #"t:point 25 25) #(struct:point 25 125) \"black\") #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(str"
 #"uct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\"))))) #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pu"
 #"lled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255"
 #" \"transparent\"))))))))))))))) #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:line-segment #(struct:point 75 25) #(struct:point 25 125) \""
 #"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulle"
 #"d-point 0 0 150 250 0 0) #(struct:"
 #"pulled-point 0 0 0 250 0 0)) 255 \"transparent\"))))) #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate "
 #"0 0 #(struct:overlay #(struct:line-segment #(struct:point 75 25) #(s"
 #"truct:point 75 125) \"black\") #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150"
 #" 0 0 0) #(struct:pulled-point 0 0 150 250 0 0) #(struct:pulled-point"
 #" 0 0 0 250 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":overlay #(struct:line-segment #(struct:point 75 25) #(struct:point "
 #"125 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(s"
 #"truct:pulled-point 0 0 150 250 0 0) #(struct:pulled-point 0 0 0 250 "
 #"0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:trans"
 #"late 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 250 0 0"
 #") #(struct:pulled-point 0 0 0 250 0 0)) 255 \"transparent\")))))))))"
 #")))))))))) #(struct:translate 250 0 #(struct:crop (#(struct:point 0 "
 #"0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 150)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0 0.0"
 #" #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(stru"
 #"ct:translate 2.0 2.0 #(struct:overlay #(struct:translate 14.0 5.5 #("
 #"struct:translate 4.0 12.5 #(struct:text \"r\" 0 1 \"black\" 25 #f sw"
 #"iss normal normal #f))) #(struct:translate 0 0 #(struct:translate 18"
 #" 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0"
 #" 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))"
 #") #(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 5"
 #"0 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) #("
 #"struct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 0 100 #(struct:overlay #(struct:translate 5.0 5.0 #(stru"
 #"ct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:tran"
 #"slate 8.5 5.5 #(struct:translate 9.5 12.5 #(struct:text \"\303\230\""
 #" 0 1 \"black\" 25 #f swiss normal normal #f))) #(struct:translate 0 "
 #"0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\")))"
 #")) #(struct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse "
 #"40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 2"
 #"5 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:line-segment #(struct:point 25 25) #("
 #"struct:point 25 125) \"black\") #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50"
 #" 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulled-point "
 #"0 0 0 150 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50"
 #" 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\")"
 #")))))))))))))) #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-segm"
 #"ent #(struct:point 150 25) #(struct:point 50 125) \"black\") #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 300 0 0 0) #(struct:pulled-point 0 0 300 "
 #"350 0 0) #(struct:pulled-point 0 0 0 350 0 0)) 255 \"transparent\"))"
 #"))) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(struc"
 #"t:point 150 25) #(struct:point 175 125) \"black\") #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 300 0 0 0) #(struct:pulled-point 0 0 300 350 0 0) #"
 #"(struct:pulled-point 0 0 0 350 0 0)) 255 \"transparent\"))))) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 15"
 #"0 25) #(struct:point 275 125) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 300 0 0 0) #(struct:pulled-point 0 0 300 350 0 0) #(struct:pu"
 #"lled-point 0 0 0 350 0 0)) 255 \"transparent\"))))) #(struct:transla"
 #"te 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 300 0 0 0) #(struct:pulled-"
 #"point 0 0 300 350 0 0) #(struct:pulled-point 0 0 0 350 0 0)) 255 \"t"
 #"ransparent\")))))))))))))))) #(struct:bb 300 350 350.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ex12"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";newTree: word -> tree"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";Creates a tree from a word"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"newTree"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"treebuild"
0 0 24 3 1 #" "
0 0 14 3 10 #"letterlist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"letterlist"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-end"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 10 #"letterlist"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"letterlist"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"letterlist"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-end"
0 0 24 3 3 #") ("
0 0 14 3 9 #"treebuild"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"letterlist"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"treebuild"
0 0 24 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mems?"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 6 #"))))) "
0 0 21 3 6 #"#false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mems"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"myfilt"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 14 3 5 #"nodes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 4 #"char"
0 0 24 3 6 #")) )) "
0 0 14 3 5 #"nodes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; add2pt: pt:prefixTree new:nodes -> pt"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";draws the tree"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";will add the the new tree to the old by adding word based on which"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";letter there are in common"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add2pt"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 5 #"mems?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 3 #") ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"make-node"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add2pt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mems"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 3 #") ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"myfilt"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 3 #") ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 6 #") )))]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-node"
0 0 24 3 2 #" ("
0 0 14 3 9 #"node-char"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 10 #"node-nodes"
0 0 24 3 1 #" "
0 0 14 3 2 #"pt"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add2pt"
0 0 24 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"newTree"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"over\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ex13"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"pt->image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add2pt"
0 0 24 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"newTree"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"over\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pt->image"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add2pt"
0 0 24 3 1 #" "
0 0 14 3 3 #"pt1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"newTree"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"over\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 6           4 4 23132
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 200.0 0.0 #(struct:overlay #(struct:tran"
 #"slate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:o"
 #"verlay #(struct:translate 11.0 5.5 #(struct:translate 7.0 12.5 #(str"
 #"uct:text \"o\" 0 1 \"black\" 25 #f swiss normal normal #f))) #(struc"
 #"t:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 25"
 #"5 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(s"
 #"truct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(stru"
 #"ct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\")))))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 100 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0"
 #" #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 150 0) #(struct:point 150 350) #(struct:point"
 #" 0 350)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"50.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overla"
 #"y #(struct:translate 2.0 2.0 #(struct:overlay #(struct:translate 12."
 #"0 5.5 #(struct:translate 6.0 12.5 #(struct:text \"v\" 0 1 \"black\" "
 #"25 #f swiss normal normal #f))) #(struct:translate 0 0 #(struct:tran"
 #"slate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"r"
 #"ed\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:e"
 #"llipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 150 0) #(struct:point 1"
 #"50 350) #(struct:point 0 350)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 0 100 #(struct:overlay #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struc"
 #"t:translate 2.0 2.0 #(struct:overlay #(struct:translate 8.5 5.5 #(st"
 #"ruct:translate 9.5 12.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 "
 #"#f swiss normal normal #f))) #(struct:translate 0 0 #(struct:transla"
 #"te 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:transl"
 #"ate 0 0 #(struct:translate 20 20 "
 #"#(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(s"
 #"truct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))"
 #"))) #(struct:translate 50.0 0 #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 100 0) #(struct:point 100 250) #(struct:point 0 250)) #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 25.0 0.0 #("
 #"struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:"
 #"translate 2.0 2.0 #(struct:overlay #(struct:translate 11.0 5.5 #(str"
 #"uct:translate 7.0 12.5 #(struct:text \"e\" 0 1 \"black\" 25 #f swiss"
 #" normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 18"
 #" #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 "
 #"#(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #"
 #"(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 5"
 #"0 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 100 0) #(struct:point 100 250) #(s"
 #"truct:point 0 250)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 100 #(struct:overlay #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct:translate"
 #" 2.0 2.0 #(struct:overlay #(struct:translate 8.5 5.5 #(struct:transl"
 #"ate 9.5 12.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 #f swiss no"
 #"rmal normal #f))) #(struct:translate 0 0 #(struct:translate 18 18 #("
 #"struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(s"
 #"truct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(st"
 #"ruct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0"
 #" 255 \"transparent\"))))) #(struct:translate 50.0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) #(str"
 #"uct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struc"
 #"t:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:trans"
 #"late 14.0 5.5 #(struct:translate 4.0 12.5 #(struct:text \"r\" 0 1 \""
 #"black\" 25 #f swiss normal normal #f))) #(struct:translate 0 0 #(str"
 #"uct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(st"
 #"ruct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0"
 #" 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #("
 #"struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0"
 #" 0 #(struct:crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:"
 #"point 50 150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 100 #(struct:overlay #(struct:translat"
 #"e 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overl"
 #"ay #(struct:translate 8.5 5.5 #(struct:translate 9.5 12.5 #(struct:t"
 #"ext \"\303\230\" 0 1 \"black\" 25 #f swiss normal normal #f))) #(str"
 #"uct:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 "
 #"255 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #"
 #"(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(st"
 #"ruct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\")))"
 #")) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct"
 #":point 25 25) #(struct:point 25 125) \"black\") #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(stru"
 #"ct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\"))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pul"
 #"led-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 "
 #"\"transparent\"))))))))))))))) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 50 25) #(struct:point 25 125) \"b"
 #"lack\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) #(struct:pulled"
 #"-point 0 0 100 250 0 0) #(struct:pulled-point 0 0 0 250 0 0)) 255 \""
 #"transparent\"))))) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 50 25) #(struct:point 75 125) \"black\") #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 100 0 0 0) #(struct:pulled-point 0 0 1"
 #"00 250 0 0) #(struct:pulled-point"
 #" 0 0 0 250 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 100 0 0 0) #(struct:pulled-point 0 0 "
 #"100 250 0 0) #(struct:pulled-point 0 0 0 250 0 0)) 255 \"transparent"
 #"\"))))))))))))))))) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:line"
 #"-segment #(struct:point 75 25) #(struct:point 25 125) \"black\") #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 "
 #"150 350 0 0) #(struct:pulled-point 0 0 0 350 0 0)) 255 \"transparent"
 #"\"))))) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(s"
 #"truct:point 75 25) #(struct:point 100 125) \"black\") #(struct:trans"
 #"late 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 350 0 0"
 #") #(struct:pulled-point 0 0 0 350 0 0)) 255 \"transparent\"))))) #(s"
 #"truct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(s"
 #"truct:pulled-point 0 0 150 350 0 0) #(struct:pulled-point 0 0 0 350 "
 #"0 0)) 255 \"transparent\"))))))))))))))) #(struct:translate 150 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:poin"
 #"t 100 250) #(struct:point 0 250)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 25.0 0.0 #(struct:overlay #(struct:translat"
 #"e 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overl"
 #"ay #(struct:translate 11.0 5.5 #(struct:translate 7.0 12.5 #(struct:"
 #"text \"n\" 0 1 \"black\" 25 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \""
 #"white\"))))) #(struct:translate 0 0 #(struct:translate 20 20 #(struc"
 #"t:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:t"
 #"ranslate 25 25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(s"
 #"truct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:poin"
 #"t 100 0) #(struct:point 100 250) #(struct:point 0 250)) #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:translate 0 100 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 5.0 5.0"
 #" #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(stru"
 #"ct:translate 8.5 5.5 #(struct:tr"
 #"anslate 9.5 12.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 #f swis"
 #"s normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 1"
 #"8 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0"
 #" #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) "
 #"#(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 "
 #"50 0 255 \"transparent\"))))) #(struct:translate 50.0 0 #(struct:cro"
 #"p (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) #"
 #"(struct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(s"
 #"truct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:t"
 #"ranslate 11.0 5.5 #(struct:translate 7.0 12.5 #(struct:text \"e\" 0 "
 #"1 \"black\" 25 #f swiss normal normal #f))) #(struct:translate 0 0 #"
 #"(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) "
 #"#(struct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 "
 #"40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 25 2"
 #"5 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:transla"
 #"te 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 50 0) #(str"
 #"uct:point 50 150) #(struct:point 0 150)) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 0 100 #(struct:overlay #(struct:tran"
 #"slate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 #(struct:o"
 #"verlay #(struct:translate 8.5 5.5 #(struct:translate 9.5 12.5 #(stru"
 #"ct:text \"\303\230\" 0 1 \"black\" 25 #f swiss normal normal #f))) #"
 #"(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellipse 36 3"
 #"6 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:translate 20 "
 #"20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translate 0 0 "
 #"#(struct:translate 25 25 #(struct"
 #":ellipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":overlay #(struct:line-segment #(struct:point 25 25) #(struct:point "
 #"25 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(str"
 #"uct:pulled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0"
 #")) 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(s"
 #"truct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\"))))))))))))))"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 50 25) #(struct:point 25 125) \"black\") #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 100 0 0 0) #(struct:pulled-point 0 0 100 250 0 0) #(str"
 #"uct:pulled-point 0 0 0 250 0 0)) 255 \"transparent\"))))) #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 50 25)"
 #" #(struct:point 75 125) \"black\") #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 100 0 0 0) #(struct:pulled-point 0 0 100 250 0 0) #(struct:pulled-p"
 #"oint 0 0 0 250 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) #(struct:pulled-point "
 #"0 0 100 250 0 0) #(struct:pulled-point 0 0 0 250 0 0)) 255 \"transpa"
 #"rent\"))))))))))))))))) #(struct:translate 250 0 #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 150 0) #(struct:point 150 250) #(stru"
 #"ct:point 0 250)) #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 50.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struc"
 #"t:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:trans"
 #"late 14.5 5.5 #(struct:translate 3.5 12.5 #(struct:text \"f\" 0 1 \""
 #"black\" 25 #f swiss normal normal #f))) #(struct:translate 0 0 #(str"
 #"uct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(st"
 #"ruct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0"
 #" 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #("
 #"struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0"
 #" 0 #(struct:crop (#(struct:point 0 0) #(struct:point 150 0) #(struct"
 #":point 150 250) #(struct:point 0 250)) #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 100 #(struct:overlay #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2.0 "
 #"#(struct:overlay #(struct:translate 8.5 5.5 #(struct:translate 9.5 1"
 #"2.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 #f swiss normal norm"
 #"al #f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:el"
 #"lipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:tra"
 #"nslate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:tran"
 #"slate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"tr"
 #"ansparent\"))))) #(struct:translate 50.0 0 #(struct:crop (#(struct:p"
 #"oint 0 0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point"
 #" 0 150)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"0.0 0.0 #(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay"
 #" #(struct:translate 2.0 2.0 #(struct:overlay #(struct:translate 14.5"
 #" 5.5 #(struct:translate 3.5 12.5 #(struct:text \"f\" 0 1 \"black\" 2"
 #"5 #f swiss normal normal #f))) #(struct:translate 0 0 #(struct:trans"
 #"late 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:tran"
 #"slate 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"re"
 #"d\"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:el"
 #"lipse 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(stru"
 #"ct:crop (#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 "
 #"150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 100 #(struct:overlay #(struct:translate 5.0 5.0"
 #" #(struct:overlay #(struct:translate 2.0 2.0 #(struct:overlay #(stru"
 #"ct:translate 8.5 5.5 #(struct:tr"
 #"anslate 9.5 12.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 #f swis"
 #"s normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 1"
 #"8 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0"
 #" #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) "
 #"#(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 "
 #"50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:line-segment #(struct:point 25 25) #(struct:point 25 125) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-p"
 #"oint 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"tra"
 #"nsparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulled"
 #"-point 0 0 0 150 0 0)) 255 \"transparent\"))))))))))))))) #(struct:t"
 #"ranslate 100.0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 5"
 #"0 0) #(struct:point 50 150) #(struct:point 0 150)) #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #(struct:overlay #"
 #"(struct:translate 5.0 5.0 #(struct:overlay #(struct:translate 2.0 2."
 #"0 #(struct:overlay #(struct:translate 14.5 5.5 #(struct:translate 3."
 #"5 12.5 #(struct:text \"t\" 0 1 \"black\" 25 #f swiss normal normal #"
 #"f))) #(struct:translate 0 0 #(struct:translate 18 18 #(struct:ellips"
 #"e 36 36 0 255 \"white\"))))) #(struct:translate 0 0 #(struct:transla"
 #"te 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) #(struct:translat"
 #"e 0 0 #(struct:translate 25 25 #(struct:ellipse 50 50 0 255 \"transp"
 #"arent\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 "
 #"0) #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 150)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 100 #"
 #"(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct"
 #":translate 2.0 2.0 #(struct:overlay #(struct:translate 8.5 5.5 #(str"
 #"uct:translate 9.5 12.5 #(struct:text \"\303\230\" 0 1 \"black\" 25 #"
 #"f swiss normal normal #f))) #(struct:translate 0 0 #(struct:translat"
 #"e 18 18 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:transla"
 #"te 0 0 #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\""
 #"))))) #(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellip"
 #"se 50 50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 25 25) #(struct:point 25 125"
 #") \"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pu"
 #"lled-point 0 0 50 150 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255"
 #" \"transparent\"))))) #(struct:translate 0 0 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(struct:"
 #"pulled-point 0 0 0 150 0 0)) 255 \"transparent\"))))))))))))))) #(st"
 #"ruct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:line-segment #(struct:point "
 #"75 25) #(struct:point 25 125) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 250 0 0) #(struct:pu"
 #"lled-point 0 0 0 250 0 0)) 255 \"transparent\"))))) #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:line-segment #(struct:point 75 25) #(str"
 #"uct:point 75 125) \"black\") #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0"
 #" 0 0) #(struct:pulled-point 0 0 150 250 0 0) #(struct:pulled-point 0"
 #" 0 0 250 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 75 25) #(struct:point 12"
 #"5 125) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #(str"
 #"uct:pulled-point 0 0 150 250 0 0) #(struct:pulled-point 0 0 0 250 0 "
 #"0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:transla"
 #"te 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct"
 #":pulled-point 0 0 150 0 0 0) #(struct:pulled-point 0 0 150 250 0 0) "
 #"#(struct:pulled-point 0 0 0 250 0 0)) 255 \"transparent\")))))))))))"
 #")))))))) #(struct:translate 400 0 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 50 0) #(struct:point 50 150) #(struct:point 0 150)) "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0.0 0.0 #"
 #"(struct:overlay #(struct:translate 5.0 5.0 #(struct:overlay #(struct"
 #":translate 2.0 2.0 #(struct:overlay #(struct:translate 14.0 5.5 #(st"
 #"ruct:translate 4.0 12.5 #(struct:text \"r\" 0 1 \"black\" 25 #f swis"
 #"s normal normal #f))) #(struct:translate 0 0 #(struct:translate 18 1"
 #"8 #(struct:ellipse 36 36 0 255 \"white\"))))) #(struct:translate 0 0"
 #" #(struct:translate 20 20 #(struct:ellipse 40 40 0 255 \"red\"))))) "
 #"#(struct:translate 0 0 #(struct:translate 25 25 #(struct:ellipse 50 "
 #"50 0 255 \"transparent\"))))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 50 0) #(struct:point 50 150) #(st"
 #"ruct:point 0 150)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 0 100 #(struct:overlay #(struct:translate 5.0 5.0 #(struct"
 #":overlay #(struct:translate 2.0 2.0 #(struct:overlay #(struct:transl"
 #"ate 8.5 5.5 #(struct:translate 9.5 12.5 #(struct:text \"\303\230\" 0"
 #" 1 \"black\" 25 #f swiss normal normal #f))) #(struct:translate 0 0 "
 #"#(struct:translate 18 18 #(struct:ellipse 36 36 0 255 \"white\")))))"
 #" #(struct:translate 0 0 #(struct:translate 20 20 #(struct:ellipse 40"
 #" 40 0 255 \"red\"))))) #(struct:translate 0 0 #(struct:translate 25 "
 #"25 #(struct:ellipse 50 50 0 255 \"transparent\"))))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 25 25) #(st"
 #"ruct:point 25 125) \"black\") #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0"
 #" 0 0) #(struct:pulled-point 0 0 50 150 0 0) #(struct:pulled-point 0 "
 #"0 0 150 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 1"
 #"50 0 0) #(struct:pulled-point 0 0 0 150 0 0)) 255 \"transparent\")))"
 #")))))))))))) #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:overlay #(struct:line-segmen"
 #"t #(struct:point 225 25) #(struct:point 75 125) \"black\") #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 45"
 #"0 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"transparent\"))))"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 225 25) #(struct:point 200 125) \"black\") #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(s"
 #"truct:pulled-point 0 0 0 450 0 0)) 255 \"transparent\"))))) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 225 "
 #"25) #(struct:point 325 125) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pull"
 #"ed-point 0 0 0 450 0 0)) 255 \"transparent\"))))) #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:line-segment #(struct:point 225 25) #(stru"
 #"ct:point 425 125) \"black\") #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0"
 #" 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0"
 #" 0 0 450 0 0)) 255 \"transparent\"))))) #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 "
 #"0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 45"
 #"0 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"transparent\""
 #")))))))))))))))))) #(struct:bb 450 450 450.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
